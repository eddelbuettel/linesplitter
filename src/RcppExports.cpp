// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/linesplitter_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// linesplit_from_R_plain
bool linesplit_from_R_plain(const std::string str, SEXP sxparr);
RcppExport SEXP _linesplitter_linesplit_from_R_plain(SEXP strSEXP, SEXP sxparrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< SEXP >::type sxparr(sxparrSEXP);
    rcpp_result_gen = Rcpp::wrap(linesplit_from_R_plain(str, sxparr));
    return rcpp_result_gen;
END_RCPP
}
// linesplit_from_R
bool linesplit_from_R(const std::string str, Rcpp::XPtr<ArrowArray> sxparr);
RcppExport SEXP _linesplitter_linesplit_from_R(SEXP strSEXP, SEXP sxparrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<ArrowArray> >::type sxparr(sxparrSEXP);
    rcpp_result_gen = Rcpp::wrap(linesplit_from_R(str, sxparr));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_linesplitter_linesplit_from_R_plain", (DL_FUNC) &_linesplitter_linesplit_from_R_plain, 2},
    {"_linesplitter_linesplit_from_R", (DL_FUNC) &_linesplitter_linesplit_from_R, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_linesplitter(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
